{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "66dbfc49",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:07:58.671154Z",
     "start_time": "2023-02-02T10:07:56.091610Z"
    }
   },
   "outputs": [],
   "source": [
    "from dataloader.get import DataGetter\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f19c058d",
   "metadata": {},
   "source": [
    "### Initialisation du DataGetter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4e42307",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:07:58.686152Z",
     "start_time": "2023-02-02T10:07:58.673152Z"
    }
   },
   "outputs": [],
   "source": [
    "dg=DataGetter()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f35cad14",
   "metadata": {},
   "source": [
    "### Chargement lazy des donn√©es (sans chargement des images)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c78d8f37",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:08:00.625350Z",
     "start_time": "2023-02-02T10:07:58.688152Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>property_type</th>\n",
       "      <th>approximate_latitude</th>\n",
       "      <th>approximate_longitude</th>\n",
       "      <th>city</th>\n",
       "      <th>postal_code</th>\n",
       "      <th>size</th>\n",
       "      <th>floor</th>\n",
       "      <th>land_size</th>\n",
       "      <th>energy_performance_value</th>\n",
       "      <th>energy_performance_category</th>\n",
       "      <th>...</th>\n",
       "      <th>nb_photos</th>\n",
       "      <th>has_a_balcony</th>\n",
       "      <th>nb_terraces</th>\n",
       "      <th>has_a_cellar</th>\n",
       "      <th>has_a_garage</th>\n",
       "      <th>has_air_conditioning</th>\n",
       "      <th>last_floor</th>\n",
       "      <th>upper_floors</th>\n",
       "      <th>price</th>\n",
       "      <th>images</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>id_annonce</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35996577</th>\n",
       "      <td>appartement</td>\n",
       "      <td>43.643880</td>\n",
       "      <td>7.117183</td>\n",
       "      <td>villeneuve-loubet</td>\n",
       "      <td>6270</td>\n",
       "      <td>63.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>355000.0</td>\n",
       "      <td>LazyImages(len=4, isLoaded=False)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35811033</th>\n",
       "      <td>appartement</td>\n",
       "      <td>45.695757</td>\n",
       "      <td>4.895610</td>\n",
       "      <td>venissieux</td>\n",
       "      <td>69200</td>\n",
       "      <td>90.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>223.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>190000.0</td>\n",
       "      <td>LazyImages(len=6, isLoaded=False)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35731841</th>\n",
       "      <td>maison</td>\n",
       "      <td>47.966791</td>\n",
       "      <td>-1.220451</td>\n",
       "      <td>moutiers</td>\n",
       "      <td>35130</td>\n",
       "      <td>61.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>370.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39000.0</td>\n",
       "      <td>LazyImages(len=4, isLoaded=False)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35886765</th>\n",
       "      <td>maison</td>\n",
       "      <td>47.289292</td>\n",
       "      <td>-1.878805</td>\n",
       "      <td>cordemais</td>\n",
       "      <td>44360</td>\n",
       "      <td>142.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>764.0</td>\n",
       "      <td>217.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>299000.0</td>\n",
       "      <td>LazyImages(len=6, isLoaded=False)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35781137</th>\n",
       "      <td>appartement</td>\n",
       "      <td>45.718992</td>\n",
       "      <td>4.844234</td>\n",
       "      <td>lyon-7eme</td>\n",
       "      <td>69007</td>\n",
       "      <td>88.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>478000.0</td>\n",
       "      <td>LazyImages(len=5, isLoaded=False)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35881571</th>\n",
       "      <td>appartement</td>\n",
       "      <td>43.480292</td>\n",
       "      <td>-1.484324</td>\n",
       "      <td>bayonne</td>\n",
       "      <td>64100</td>\n",
       "      <td>2995.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>255.0</td>\n",
       "      <td>E</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>190000.0</td>\n",
       "      <td>LazyImages(len=6, isLoaded=False)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35890109</th>\n",
       "      <td>appartement</td>\n",
       "      <td>48.861391</td>\n",
       "      <td>2.401158</td>\n",
       "      <td>paris-20eme</td>\n",
       "      <td>75020</td>\n",
       "      <td>36.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>229.0</td>\n",
       "      <td>D</td>\n",
       "      <td>...</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>399000.0</td>\n",
       "      <td>LazyImages(len=6, isLoaded=False)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36010245</th>\n",
       "      <td>appartement</td>\n",
       "      <td>44.397837</td>\n",
       "      <td>-1.164312</td>\n",
       "      <td>biscarrosse</td>\n",
       "      <td>40600</td>\n",
       "      <td>99.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>328000.0</td>\n",
       "      <td>LazyImages(len=5, isLoaded=False)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35864579</th>\n",
       "      <td>duplex</td>\n",
       "      <td>48.864204</td>\n",
       "      <td>2.808693</td>\n",
       "      <td>magny-le-hongre</td>\n",
       "      <td>77700</td>\n",
       "      <td>9281.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>463000.0</td>\n",
       "      <td>LazyImages(len=5, isLoaded=False)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35748883</th>\n",
       "      <td>maison</td>\n",
       "      <td>46.032306</td>\n",
       "      <td>1.966711</td>\n",
       "      <td>le-donzeil</td>\n",
       "      <td>23480</td>\n",
       "      <td>90.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>600.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>69930.0</td>\n",
       "      <td>LazyImages(len=6, isLoaded=False)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>37368 rows √ó 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           property_type  approximate_latitude  approximate_longitude  \\\n",
       "id_annonce                                                              \n",
       "35996577     appartement             43.643880               7.117183   \n",
       "35811033     appartement             45.695757               4.895610   \n",
       "35731841          maison             47.966791              -1.220451   \n",
       "35886765          maison             47.289292              -1.878805   \n",
       "35781137     appartement             45.718992               4.844234   \n",
       "...                  ...                   ...                    ...   \n",
       "35881571     appartement             43.480292              -1.484324   \n",
       "35890109     appartement             48.861391               2.401158   \n",
       "36010245     appartement             44.397837              -1.164312   \n",
       "35864579          duplex             48.864204               2.808693   \n",
       "35748883          maison             46.032306               1.966711   \n",
       "\n",
       "                         city  postal_code    size  floor  land_size  \\\n",
       "id_annonce                                                             \n",
       "35996577    villeneuve-loubet         6270    63.0    NaN        NaN   \n",
       "35811033           venissieux        69200    90.0    3.0        NaN   \n",
       "35731841             moutiers        35130    61.0    NaN      370.0   \n",
       "35886765            cordemais        44360   142.0    NaN      764.0   \n",
       "35781137            lyon-7eme        69007    88.0    3.0        NaN   \n",
       "...                       ...          ...     ...    ...        ...   \n",
       "35881571              bayonne        64100  2995.0    NaN        NaN   \n",
       "35890109          paris-20eme        75020    36.0    4.0        NaN   \n",
       "36010245          biscarrosse        40600    99.0    2.0        NaN   \n",
       "35864579      magny-le-hongre        77700  9281.0    NaN        NaN   \n",
       "35748883           le-donzeil        23480    90.0    NaN      600.0   \n",
       "\n",
       "            energy_performance_value energy_performance_category  ...  \\\n",
       "id_annonce                                                        ...   \n",
       "35996577                         NaN                         NaN  ...   \n",
       "35811033                       223.0                           D  ...   \n",
       "35731841                         NaN                         NaN  ...   \n",
       "35886765                       217.0                           D  ...   \n",
       "35781137                         NaN                         NaN  ...   \n",
       "...                              ...                         ...  ...   \n",
       "35881571                       255.0                           E  ...   \n",
       "35890109                       229.0                           D  ...   \n",
       "36010245                         NaN                         NaN  ...   \n",
       "35864579                         NaN                         NaN  ...   \n",
       "35748883                         NaN                         NaN  ...   \n",
       "\n",
       "            nb_photos has_a_balcony nb_terraces  has_a_cellar  has_a_garage  \\\n",
       "id_annonce                                                                    \n",
       "35996577          4.0           0.0         1.0           0.0           0.0   \n",
       "35811033          8.0           0.0         0.0           0.0           0.0   \n",
       "35731841          4.0           0.0         0.0           0.0           0.0   \n",
       "35886765          8.0           0.0         1.0           0.0           0.0   \n",
       "35781137          5.0           1.0         0.0           0.0           0.0   \n",
       "...               ...           ...         ...           ...           ...   \n",
       "35881571          7.0           0.0         0.0           0.0           0.0   \n",
       "35890109          8.0           0.0         0.0           0.0           0.0   \n",
       "36010245          5.0           1.0         0.0           0.0           0.0   \n",
       "35864579          5.0           0.0         0.0           0.0           0.0   \n",
       "35748883         22.0           0.0         0.0           0.0           0.0   \n",
       "\n",
       "            has_air_conditioning  last_floor  upper_floors     price  \\\n",
       "id_annonce                                                             \n",
       "35996577                     0.0         0.0           0.0  355000.0   \n",
       "35811033                     0.0         0.0           0.0  190000.0   \n",
       "35731841                     0.0         0.0           0.0   39000.0   \n",
       "35886765                     0.0         0.0           0.0  299000.0   \n",
       "35781137                     0.0         0.0           0.0  478000.0   \n",
       "...                          ...         ...           ...       ...   \n",
       "35881571                     0.0         0.0           0.0  190000.0   \n",
       "35890109                     0.0         0.0           0.0  399000.0   \n",
       "36010245                     0.0         0.0           0.0  328000.0   \n",
       "35864579                     0.0         0.0           0.0  463000.0   \n",
       "35748883                     0.0         0.0           0.0   69930.0   \n",
       "\n",
       "                                       images  \n",
       "id_annonce                                     \n",
       "35996577    LazyImages(len=4, isLoaded=False)  \n",
       "35811033    LazyImages(len=6, isLoaded=False)  \n",
       "35731841    LazyImages(len=4, isLoaded=False)  \n",
       "35886765    LazyImages(len=6, isLoaded=False)  \n",
       "35781137    LazyImages(len=5, isLoaded=False)  \n",
       "...                                       ...  \n",
       "35881571    LazyImages(len=6, isLoaded=False)  \n",
       "35890109    LazyImages(len=6, isLoaded=False)  \n",
       "36010245    LazyImages(len=5, isLoaded=False)  \n",
       "35864579    LazyImages(len=5, isLoaded=False)  \n",
       "35748883    LazyImages(len=6, isLoaded=False)  \n",
       "\n",
       "[37368 rows x 28 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dg.getData('train')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56d47420",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:08:01.052332Z",
     "start_time": "2023-02-02T10:08:00.626351Z"
    }
   },
   "outputs": [],
   "source": [
    "dg.getData('test')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78fd36bc",
   "metadata": {},
   "source": [
    "Rq : pas de colonne price pour le set de test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa09f478",
   "metadata": {},
   "source": [
    "###  Chargement des donn√©es (dont les images) via it√©rateur"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 5,
=======
   "execution_count": null,
>>>>>>> 77e443cc4347fcdd73c3147527fe51ac0e6170d4
   "id": "1815772a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:08:03.459399Z",
     "start_time": "2023-02-02T10:08:01.055333Z"
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import json\n",
    "from skimage import io\n",
    "k=0\n",
    "# id_annonce : Int\n",
    "# X : pd.Series\n",
    "# y : float\n",
    "# images : list(np.array)\n",
    "for id_annonce, X, images, y in dg.iterateLoadedData(\"train\"):\n",
    "    print(f\"{k+1} - L'annonce d'identifiant : f{id_annonce} contient les valeurs : {json.dumps(X.to_dict(), indent=2)} et les images de tailles {[im.shape for im in images]} pour un prix de {y}\")\n",
    "    print(\"Affichage de la premi√®re image :\")\n",
    "    io.imshow(images[0])\n",
    "    io.show()\n",
    "    print(\"\\n\\n\")\n",
    "    \n",
    "    k +=1\n",
    "    if k>=5:break"
   ]
  },
  {
<<<<<<< HEAD
   "cell_type": "markdown",
   "id": "296ae440",
   "metadata": {},
   "source": [
    "# Data analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "40a5fa8f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:08:03.475402Z",
     "start_time": "2023-02-02T10:08:03.461381Z"
    }
   },
   "outputs": [],
   "source": [
    "from analysis.columns_analyzer import ColumnAnalyzer\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "534f4f37",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:08:04.994407Z",
     "start_time": "2023-02-02T10:08:03.476382Z"
    }
   },
   "outputs": [],
   "source": [
    "df=dg.getData('train')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5e6abf1e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:08:19.065112Z",
     "start_time": "2023-02-02T10:08:04.996410Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Le type de la colonne postal_code n'a pas √©t√© reconnu dans l'analyse des colonnes et sera ignor√© dans le rendu final\n",
      "_________________________\n",
      "property_type:\n",
      "[numberOfCategories] = 22 ; \n",
      "[proportionOfEachCategory] = {'appartement': 0.42102868764718476, 'atelier': 5.352172982230786e-05, 'chalet': 0.0012845215157353885, 'chambre': 0.00010704345964461572, 'ch√¢teau': 0.0005619781631342324, 'divers': 0.057187968315135944, 'duplex': 0.005887390280453864, 'ferme': 0.003478912438450011, 'g√Æte': 8.028259473346178e-05, 'h√¥tel': 2.676086491115393e-05, 'h√¥tel particulier': 0.00016056518946692356, 'loft': 0.001445086705202312, 'maison': 0.4194765574823378, 'manoir': 0.0004014129736673089, 'moulin': 0.00045493470348961676, 'parking': 0.002569043031470777, 'propri√©t√©': 0.010918432883750802, 'p√©niche': 0.00021408691928923143, 'terrain': 0.041051166773710124, 'terrain √† b√¢tir': 0.00797473774352387, 'viager': 0.004736673089274245, 'villa': 0.02090023549561122} ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = object ; \n",
      "\n",
      "_________________________\n",
      "approximate_latitude:\n",
      "[min] = 41.3744 ; \n",
      "[max] = 51.0759 ; \n",
      "[mean] = 46.5462 ; \n",
      "[median] = 46.9394 ; \n",
      "[quartile_1] = 43.9215 ; \n",
      "[quartile_3] = 48.8415 ; \n",
      "[std] = 2.3566 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "approximate_longitude:\n",
      "[min] = -4.7335 ; \n",
      "[max] = 9.5032 ; \n",
      "[mean] = 2.6191 ; \n",
      "[median] = 2.3808 ; \n",
      "[quartile_1] = 1.096 ; \n",
      "[quartile_3] = 4.6242 ; \n",
      "[std] = 2.5971 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "city:\n",
      "[numberOfCategories] = 8643 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = object ; \n",
      "\n",
      "_________________________\n",
      "size:\n",
      "[min] = 1.0 ; \n",
      "[max] = 411311.0 ; \n",
      "[mean] = 1088.8316 ; \n",
      "[median] = 115.0 ; \n",
      "[quartile_1] = 74.0 ; \n",
      "[quartile_3] = 235.25 ; \n",
      "[std] = 5555.3209 ; \n",
      "[missingValues] = 512 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "floor:\n",
      "[min] = 1.0 ; \n",
      "[max] = 55.0 ; \n",
      "[mean] = 3.4795 ; \n",
      "[median] = 2.0 ; \n",
      "[quartile_1] = 1.0 ; \n",
      "[quartile_3] = 4.0 ; \n",
      "[std] = 6.7256 ; \n",
      "[missingValues] = 27625 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "land_size:\n",
      "[min] = 1.0 ; \n",
      "[max] = 6203700.0 ; \n",
      "[mean] = 3995.6654 ; \n",
      "[median] = 795.0 ; \n",
      "[quartile_1] = 362.0 ; \n",
      "[quartile_3] = 1841.0 ; \n",
      "[std] = 54415.9541 ; \n",
      "[missingValues] = 21787 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "energy_performance_value:\n",
      "[min] = 0.0 ; \n",
      "[max] = 100000.0 ; \n",
      "[mean] = 205.3851 ; \n",
      "[median] = 180.0 ; \n",
      "[quartile_1] = 125.0 ; \n",
      "[quartile_3] = 239.0 ; \n",
      "[std] = 790.5018 ; \n",
      "[missingValues] = 18300 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "energy_performance_category:\n",
      "[numberOfCategories] = 7 ; \n",
      "[proportionOfEachCategory] = {'A': 0.01648469278527082, 'B': 0.0572147291800471, 'C': 0.11006743737957611, 'D': 0.18794155427103404, 'E': 0.10203917790622993, 'F': 0.02807214729180047, 'G': 0.008456433311924642} ; \n",
      "[missingValues] = 18300 ; \n",
      "[col_type] = object ; \n",
      "\n",
      "_________________________\n",
      "ghg_value:\n",
      "[min] = 0.0 ; \n",
      "[max] = 17024.0 ; \n",
      "[mean] = 31.8455 ; \n",
      "[median] = 16.0 ; \n",
      "[quartile_1] = 8.0 ; \n",
      "[quartile_3] = 36.0 ; \n",
      "[std] = 310.5762 ; \n",
      "[missingValues] = 18838 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "ghg_category:\n",
      "[numberOfCategories] = 7 ; \n",
      "[proportionOfEachCategory] = {'A': 0.06815992292870905, 'B': 0.12125347891243846, 'C': 0.0915489188610576, 'D': 0.0868925283665168, 'E': 0.08049668165275102, 'F': 0.03401305930207664, 'G': 0.013514236780132733} ; \n",
      "[missingValues] = 18838 ; \n",
      "[col_type] = object ; \n",
      "\n",
      "_________________________\n",
      "exposition:\n",
      "[numberOfCategories] = 12 ; \n",
      "[proportionOfEachCategory] = {'Est': 0.018518518518518517, 'Est-Ouest': 0.021943909227146223, 'Nord': 0.006181759794476558, 'Nord-Est': 0.005914151145365018, 'Nord-Ouest': 0.008536715906658103, 'Nord-Sud': 0.0006690216227788482, 'Ouest': 0.02159601798330122, 'Ouest-Est': 0.001070434596446157, 'Sud': 0.08667844144722757, 'Sud-Est': 0.025583386855063155, 'Sud-Nord': 0.009339541853992722, 'Sud-Ouest': 0.03733140655105973} ; \n",
      "[missingValues] = 28274 ; \n",
      "[col_type] = object ; \n",
      "\n",
      "_________________________\n",
      "nb_rooms:\n",
      "[min] = 0.0 ; \n",
      "[max] = 130.0 ; \n",
      "[mean] = 4.2454 ; \n",
      "[median] = 4.0 ; \n",
      "[quartile_1] = 3.0 ; \n",
      "[quartile_3] = 5.0 ; \n",
      "[std] = 2.9878 ; \n",
      "[missingValues] = 1566 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "nb_bedrooms:\n",
      "[min] = 0.0 ; \n",
      "[max] = 118.0 ; \n",
      "[mean] = 2.8649 ; \n",
      "[median] = 3.0 ; \n",
      "[quartile_1] = 2.0 ; \n",
      "[quartile_3] = 4.0 ; \n",
      "[std] = 2.1565 ; \n",
      "[missingValues] = 2733 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "nb_bathrooms:\n",
      "[min] = 0.0 ; \n",
      "[max] = 3.0 ; \n",
      "[mean] = 0.9207 ; \n",
      "[median] = 1.0 ; \n",
      "[quartile_1] = 1.0 ; \n",
      "[quartile_3] = 1.0 ; \n",
      "[std] = 0.2708 ; \n",
      "[missingValues] = 13273 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "nb_parking_places:\n",
      "[min] = 0.0 ; \n",
      "[max] = 1.0 ; \n",
      "[mean] = 0.2935 ; \n",
      "[median] = 0.0 ; \n",
      "[quartile_1] = 0.0 ; \n",
      "[quartile_3] = 1.0 ; \n",
      "[std] = 0.4554 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "nb_boxes:\n",
      "[min] = 0.0 ; \n",
      "[max] = 1.0 ; \n",
      "[mean] = 0.1797 ; \n",
      "[median] = 0.0 ; \n",
      "[quartile_1] = 0.0 ; \n",
      "[quartile_3] = 0.0 ; \n",
      "[std] = 0.3839 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "nb_photos:\n",
      "[min] = 1.0 ; \n",
      "[max] = 50.0 ; \n",
      "[mean] = 7.9792 ; \n",
      "[median] = 8.0 ; \n",
      "[quartile_1] = 5.0 ; \n",
      "[quartile_3] = 10.0 ; \n",
      "[std] = 4.6461 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "has_a_balcony:\n",
      "[min] = 0.0 ; \n",
      "[max] = 1.0 ; \n",
      "[mean] = 0.1483 ; \n",
      "[median] = 0.0 ; \n",
      "[quartile_1] = 0.0 ; \n",
      "[quartile_3] = 0.0 ; \n",
      "[std] = 0.3554 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "nb_terraces:\n",
      "[min] = 0.0 ; \n",
      "[max] = 1.0 ; \n",
      "[mean] = 0.3096 ; \n",
      "[median] = 0.0 ; \n",
      "[quartile_1] = 0.0 ; \n",
      "[quartile_3] = 1.0 ; \n",
      "[std] = 0.4623 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "has_a_cellar:\n",
      "[min] = 0.0 ; \n",
      "[max] = 1.0 ; \n",
      "[mean] = 0.2001 ; \n",
      "[median] = 0.0 ; \n",
      "[quartile_1] = 0.0 ; \n",
      "[quartile_3] = 0.0 ; \n",
      "[std] = 0.4001 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "has_a_garage:\n",
      "[min] = 0.0 ; \n",
      "[max] = 1.0 ; \n",
      "[mean] = 0.0539 ; \n",
      "[median] = 0.0 ; \n",
      "[quartile_1] = 0.0 ; \n",
      "[quartile_3] = 0.0 ; \n",
      "[std] = 0.2258 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "has_air_conditioning:\n",
      "[min] = 0.0 ; \n",
      "[max] = 1.0 ; \n",
      "[mean] = 0.0398 ; \n",
      "[median] = 0.0 ; \n",
      "[quartile_1] = 0.0 ; \n",
      "[quartile_3] = 0.0 ; \n",
      "[std] = 0.1956 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "last_floor:\n",
      "[min] = 0.0 ; \n",
      "[max] = 1.0 ; \n",
      "[mean] = 0.0038 ; \n",
      "[median] = 0.0 ; \n",
      "[quartile_1] = 0.0 ; \n",
      "[quartile_3] = 0.0 ; \n",
      "[std] = 0.0617 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "upper_floors:\n",
      "[min] = 0.0 ; \n",
      "[max] = 1.0 ; \n",
      "[mean] = 0.0002 ; \n",
      "[median] = 0.0 ; \n",
      "[quartile_1] = 0.0 ; \n",
      "[quartile_3] = 0.0 ; \n",
      "[std] = 0.0155 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "_________________________\n",
      "price:\n",
      "[min] = 24465.0 ; \n",
      "[max] = 2299000.0 ; \n",
      "[mean] = 343221.2721 ; \n",
      "[median] = 255250.0 ; \n",
      "[quartile_1] = 155462.5 ; \n",
      "[quartile_3] = 415000.0 ; \n",
      "[std] = 308912.9143 ; \n",
      "[missingValues] = 0 ; \n",
      "[col_type] = float64 ; \n",
      "\n",
      "\n"
=======
   "cell_type": "code",
   "execution_count": 20,
   "id": "2216a7cd",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'lavis'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[20], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[39mimport\u001b[39;00m \u001b[39mmatplotlib\u001b[39;00m\u001b[39m.\u001b[39;00m\u001b[39mpyplot\u001b[39;00m \u001b[39mas\u001b[39;00m \u001b[39mplt\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m \u001b[39mfrom\u001b[39;00m \u001b[39mLAVIS\u001b[39;00m\u001b[39m.\u001b[39;00m\u001b[39mget_caption\u001b[39;00m \u001b[39mimport\u001b[39;00m get_caption\n\u001b[0;32m      4\u001b[0m df \u001b[39m=\u001b[39m dg\u001b[39m.\u001b[39mgetData(\u001b[39m\"\u001b[39m\u001b[39mtrain\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m      5\u001b[0m df\u001b[39m.\u001b[39mimages\u001b[39m.\u001b[39miloc[:\u001b[39m5\u001b[39m]\u001b[39m.\u001b[39mapply(\u001b[39mlambda\u001b[39;00m x: \u001b[39mlen\u001b[39m(x\u001b[39m.\u001b[39mload()))\n",
      "File \u001b[1;32mc:\\My Projects\\challengedata.ens.fr-RealEstatePricePrediction\\LAVIS\\get_caption.py:4\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[39mimport\u001b[39;00m \u001b[39mtorch\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[39mfrom\u001b[39;00m \u001b[39mPIL\u001b[39;00m \u001b[39mimport\u001b[39;00m Image\n\u001b[1;32m----> 4\u001b[0m \u001b[39mfrom\u001b[39;00m \u001b[39mlavis\u001b[39;00m\u001b[39m.\u001b[39;00m\u001b[39mmodels\u001b[39;00m \u001b[39mimport\u001b[39;00m load_model_and_preprocess\n\u001b[0;32m      6\u001b[0m \u001b[39m# setup device to use\u001b[39;00m\n\u001b[0;32m      7\u001b[0m device \u001b[39m=\u001b[39m torch\u001b[39m.\u001b[39mdevice(\u001b[39m\"\u001b[39m\u001b[39mcuda\u001b[39m\u001b[39m\"\u001b[39m \u001b[39mif\u001b[39;00m torch\u001b[39m.\u001b[39mcuda\u001b[39m.\u001b[39mis_available() \u001b[39melse\u001b[39;00m \u001b[39m\"\u001b[39m\u001b[39mcpu\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'lavis'"
>>>>>>> 77e443cc4347fcdd73c3147527fe51ac0e6170d4
     ]
    }
   ],
   "source": [
<<<<<<< HEAD
    "ca = ColumnAnalyzer()\n",
    "ca.getDetails(df, ignoring = [\"images\"])\n",
    "ca.prettyPrint()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "273dc2c2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:27:10.944081Z",
     "start_time": "2023-02-02T10:27:10.925081Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['property_type', 'city', 'size', 'floor', 'land_size', 'nb_rooms',\n",
       "       'nb_bedrooms', 'nb_bathrooms', 'nb_parking_places', 'nb_boxes',\n",
       "       'has_a_balcony', 'nb_terraces', 'has_a_cellar', 'has_a_garage',\n",
       "       'has_air_conditioning', 'last_floor', 'upper_floors', 'price',\n",
       "       'images'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns[[True, False, False, True, False, True, True, True, False, False, False, False, False, True, True, True, True, True, False, True, True,True, True, True, True, True, True, True ]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f77c7a6a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:35:53.918493Z",
     "start_time": "2023-02-02T10:35:53.882494Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">price</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>count</th>\n",
       "      <th>max</th>\n",
       "      <th>min</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>property_type</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>appartement</th>\n",
       "      <td>3.723562e+05</td>\n",
       "      <td>15733</td>\n",
       "      <td>2299000.0</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>321032.511155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>atelier</th>\n",
       "      <td>1.425000e+06</td>\n",
       "      <td>2</td>\n",
       "      <td>1550000.0</td>\n",
       "      <td>1300000.0</td>\n",
       "      <td>176776.695297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chalet</th>\n",
       "      <td>4.306361e+05</td>\n",
       "      <td>48</td>\n",
       "      <td>1300000.0</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>391193.604909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chambre</th>\n",
       "      <td>1.063750e+05</td>\n",
       "      <td>4</td>\n",
       "      <td>132500.0</td>\n",
       "      <td>95000.0</td>\n",
       "      <td>17820.283387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ch√¢teau</th>\n",
       "      <td>1.010298e+06</td>\n",
       "      <td>21</td>\n",
       "      <td>1950000.0</td>\n",
       "      <td>261000.0</td>\n",
       "      <td>510056.342593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>divers</th>\n",
       "      <td>3.108264e+05</td>\n",
       "      <td>2137</td>\n",
       "      <td>2265000.0</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>320672.214666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>duplex</th>\n",
       "      <td>4.040481e+05</td>\n",
       "      <td>220</td>\n",
       "      <td>2099000.0</td>\n",
       "      <td>43000.0</td>\n",
       "      <td>330580.749725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ferme</th>\n",
       "      <td>3.234432e+05</td>\n",
       "      <td>130</td>\n",
       "      <td>1802000.0</td>\n",
       "      <td>37450.0</td>\n",
       "      <td>264561.206922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g√Æte</th>\n",
       "      <td>4.583333e+05</td>\n",
       "      <td>3</td>\n",
       "      <td>630000.0</td>\n",
       "      <td>265000.0</td>\n",
       "      <td>183462.076008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h√¥tel</th>\n",
       "      <td>4.910000e+05</td>\n",
       "      <td>1</td>\n",
       "      <td>491000.0</td>\n",
       "      <td>491000.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h√¥tel particulier</th>\n",
       "      <td>7.286500e+05</td>\n",
       "      <td>6</td>\n",
       "      <td>1100000.0</td>\n",
       "      <td>400000.0</td>\n",
       "      <td>237179.120076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loft</th>\n",
       "      <td>5.065806e+05</td>\n",
       "      <td>54</td>\n",
       "      <td>2050000.0</td>\n",
       "      <td>89000.0</td>\n",
       "      <td>432933.317714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>maison</th>\n",
       "      <td>3.274210e+05</td>\n",
       "      <td>15675</td>\n",
       "      <td>2289000.0</td>\n",
       "      <td>24800.0</td>\n",
       "      <td>277808.473009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>manoir</th>\n",
       "      <td>7.562767e+05</td>\n",
       "      <td>15</td>\n",
       "      <td>2200000.0</td>\n",
       "      <td>246500.0</td>\n",
       "      <td>505625.603608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>moulin</th>\n",
       "      <td>5.167144e+05</td>\n",
       "      <td>17</td>\n",
       "      <td>1011000.0</td>\n",
       "      <td>180000.0</td>\n",
       "      <td>256453.700316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>parking</th>\n",
       "      <td>6.071635e+04</td>\n",
       "      <td>96</td>\n",
       "      <td>415000.0</td>\n",
       "      <td>25000.0</td>\n",
       "      <td>67369.588612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>propri√©t√©</th>\n",
       "      <td>6.730181e+05</td>\n",
       "      <td>408</td>\n",
       "      <td>2210526.0</td>\n",
       "      <td>27990.0</td>\n",
       "      <td>434945.815423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>p√©niche</th>\n",
       "      <td>5.506125e+05</td>\n",
       "      <td>8</td>\n",
       "      <td>1575000.0</td>\n",
       "      <td>46000.0</td>\n",
       "      <td>584961.294049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>terrain</th>\n",
       "      <td>1.203039e+05</td>\n",
       "      <td>1534</td>\n",
       "      <td>2100000.0</td>\n",
       "      <td>24465.0</td>\n",
       "      <td>174690.467303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>terrain √† b√¢tir</th>\n",
       "      <td>1.018994e+05</td>\n",
       "      <td>298</td>\n",
       "      <td>1090000.0</td>\n",
       "      <td>24800.0</td>\n",
       "      <td>119010.825967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>viager</th>\n",
       "      <td>1.733239e+05</td>\n",
       "      <td>177</td>\n",
       "      <td>2131895.0</td>\n",
       "      <td>29250.0</td>\n",
       "      <td>217962.675241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>villa</th>\n",
       "      <td>5.255000e+05</td>\n",
       "      <td>781</td>\n",
       "      <td>2200000.0</td>\n",
       "      <td>45000.0</td>\n",
       "      <td>358979.352529</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          price                                            \n",
       "                           mean  count        max        min            std\n",
       "property_type                                                              \n",
       "appartement        3.723562e+05  15733  2299000.0    25000.0  321032.511155\n",
       "atelier            1.425000e+06      2  1550000.0  1300000.0  176776.695297\n",
       "chalet             4.306361e+05     48  1300000.0    25000.0  391193.604909\n",
       "chambre            1.063750e+05      4   132500.0    95000.0   17820.283387\n",
       "ch√¢teau            1.010298e+06     21  1950000.0   261000.0  510056.342593\n",
       "divers             3.108264e+05   2137  2265000.0    25000.0  320672.214666\n",
       "duplex             4.040481e+05    220  2099000.0    43000.0  330580.749725\n",
       "ferme              3.234432e+05    130  1802000.0    37450.0  264561.206922\n",
       "g√Æte               4.583333e+05      3   630000.0   265000.0  183462.076008\n",
       "h√¥tel              4.910000e+05      1   491000.0   491000.0            NaN\n",
       "h√¥tel particulier  7.286500e+05      6  1100000.0   400000.0  237179.120076\n",
       "loft               5.065806e+05     54  2050000.0    89000.0  432933.317714\n",
       "maison             3.274210e+05  15675  2289000.0    24800.0  277808.473009\n",
       "manoir             7.562767e+05     15  2200000.0   246500.0  505625.603608\n",
       "moulin             5.167144e+05     17  1011000.0   180000.0  256453.700316\n",
       "parking            6.071635e+04     96   415000.0    25000.0   67369.588612\n",
       "propri√©t√©          6.730181e+05    408  2210526.0    27990.0  434945.815423\n",
       "p√©niche            5.506125e+05      8  1575000.0    46000.0  584961.294049\n",
       "terrain            1.203039e+05   1534  2100000.0    24465.0  174690.467303\n",
       "terrain √† b√¢tir    1.018994e+05    298  1090000.0    24800.0  119010.825967\n",
       "viager             1.733239e+05    177  2131895.0    29250.0  217962.675241\n",
       "villa              5.255000e+05    781  2200000.0    45000.0  358979.352529"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[[\"property_type\", \"price\"]].groupby(\"property_type\").agg([\"mean\", \"count\", \"max\", \"min\", \"std\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "07fc4c56",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T11:08:10.461161Z",
     "start_time": "2023-02-02T11:08:10.443143Z"
    }
   },
   "outputs": [],
   "source": [
    "def scorePropertyType(df):\n",
    "    def minimizeCategoryPropertyType(value):\n",
    "        if value in [\"ch√¢teau\", \"atelier\", \"h√¥tel particulier\", \"manoir\", \"p√©niche\", \"villa\", \"moulin\", \"loft\", \"propri√©t√©\"]:\n",
    "            return 'diversCher'\n",
    "        elif value in [\"terrain\", \"terrain √† b√¢tir\"] : return \"terrain\"\n",
    "        elif value in [\"chalet\", \"ferme\",  \"g√Æte\", \"viager\", \"maison\"] : return \"maison\"\n",
    "        elif value in [\"duplex\", \"chambre\", \"appartement\"] : return \"appartement\"\n",
    "        elif value in [\"h√¥tel\"] : return \"divers\"\n",
    "        elif value in [\"parking\"] : return \"parking\"\n",
    "        elif value in [\"divers\"] : return \"divers\"\n",
    "        else : return value\n",
    "    def scoringMap(value):\n",
    "        if value =='appartement': return 0.543463 \n",
    "        elif value == \"divers\" : return 0.369380\n",
    "        elif value == \"diversCher\" : return 1.000000\n",
    "        elif value == \"maison\" : return 0.492737\n",
    "        elif value == \"parking\" : return 0.000000\n",
    "        elif value == \"terrain\" : return 0.063189\n",
    "        else:  raise Exception(\"Property type category not recognized\")\n",
    "    return df.property_type.apply(minimizeCategoryPropertyType).apply(scoringMap)\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "85d6f590",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-02-02T10:58:12.625111Z",
     "start_time": "2023-02-02T10:58:12.592130Z"
    }
   },
   "outputs": [],
   "source": [
    "df['scorePropertyType']  = scorePropertyType(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "375a19bc",
   "metadata": {},
   "outputs": [],
   "source": []
=======
    "import matplotlib.pyplot as plt\n",
    "from LAVIS.get_caption import get_caption\n",
    "\n",
    "df = dg.getData(\"train\")\n",
    "df.images.iloc[:5].apply(lambda x: len(x.load()))\n",
    "\n",
    "def caption_from_image_file(x):\n",
    "    return [get_caption(i) for i in x.load()]\n",
    "\n",
    "    \n"
   ]
>>>>>>> 77e443cc4347fcdd73c3147527fe51ac0e6170d4
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  },
  "vscode": {
   "interpreter": {
    "hash": "31ff630c6e82ba12fef539dea8022209045e49d81c27e1972fa5386bff428379"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
